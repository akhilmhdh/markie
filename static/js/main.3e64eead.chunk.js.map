{"version":3,"sources":["img/icons/download.png","components/Header/header.js","components/Details/details.js","components/TextArea/textArea.js","components/MarkDown/markDown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","href","encodeURIComponent","text","download","fileName","src","download_icon","alt","type","name","id","onClick","toggleTheme","htmlFor","Details","value","onChange","el","setFileName","target","onBlur","length","wordCount","characterCount","require","TextArea","myRef","React","createRef","this","myCodeMirror","Codemirror","fromTextArea","current","lineNumbers","mode","theme","on","cm","change","setText","getValue","nextProps","nextState","darkMode","setOption","console","log","ref","Component","MarkDown","state","code","text2MD","bind","changeView","converter","Showdown","Converter","emoji","setState","__html","makeHtml","dangerouslySetInnerHTML","themeDay","themeNight","App","onTextChange","updateCSSVariables","Object","entries","key","document","documentElement","style","setProperty","split","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e64eead.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/download.5acbe25e.png\";","import React from 'react';\n\nimport download_icon from \"./../../img/icons/download.png\"\nimport './header.css'\n\nconst Header= (props) =>{\n    return(\n    <div className=\"headerContainer\">\n        <div>MARKIE</div>\n        <div className=\"headerItemContainer\">\n            <div>\n                <a href={`data:text/plain;charset=utf-8,${encodeURIComponent(props.text)}`}\n                download={`${props.fileName}.md`}>\n                <img src={download_icon} alt=\"icon\"\n                className=\"icon\"/>\n                </a>\n            </div>\n            <div className=\"darkModeContainer\">\n                <input\n                 type=\"checkbox\" \n                 name=\"darkMode\" \n                 id=\"darkMode\"\n                 onClick={()=>props.toggleTheme()}\n                />\n                <label htmlFor=\"darkMode\">\n                    <div/>\n                </label>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default Header;","import React from 'react'\n\nimport \"./details.css\"\n\nconst Details =(props)=>{\n    return(\n    <div className=\"detailsContainer\">\n        <div className=\"documentTitle\">\n            <label>Document Title</label>\n            <input value={props.fileName} \n            onChange={(el)=>{\n                props.setFileName(el.target.value);\n            }}\n            onBlur={(el)=>props.fileName.length===0?props.setFileName(\"Untitled Doc\"):null}/>\n        </div>\n        <div className=\"documentDetails\">\n            <div>WORDS: {props.wordCount}</div>\n            <div>CHARACTERS: {props.characterCount}</div>\n        </div>\n    </div>\n    )\n}\n\nexport default Details;","import React,{Component} from 'react'\nimport Codemirror from 'codemirror'\n\n\nimport 'codemirror/lib/codemirror.css'\nimport './textArea.css'\nimport 'codemirror/theme/xq-light.css'\nimport 'codemirror/theme/ayu-mirage.css'\nrequire('codemirror/mode/gfm/gfm')\n\nclass TextArea extends Component{\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  componentDidMount(){\n    this.myCodeMirror=Codemirror.fromTextArea(this.myRef.current,{\n      value:this.props.text,\n      lineNumbers: true,\n      mode: 'gfm',\n      theme:\"xq-light\"\n    })\n    this.myCodeMirror.on(\"change\",(cm,change)=>{this.props.setText(this.myCodeMirror.getValue())})\n  }\n  componentWillUpdate(nextProps,nextState){\n    if(nextProps.darkMode!==this.props.darkMode){\n      this.myCodeMirror.setOption(\"theme\",nextProps.darkMode?\"xq-light\":\"ayu-mirage\")\n    }\n  }\n   render(){\n    return(\n      <div className=\"textContainer\">\n        <div className=\"textTitle\">MARKDOWN{console.log(this.props.darkMode)}</div>\n        <div className=\"textSubContainer\">\n          <textarea value={this.props.text} ref={this.myRef}/>\n        </div>\n      </div>\n    )\n   }\n}\n\nexport default TextArea;","import React,{Component} from 'react'\nimport Showdown from 'showdown';\n\nimport './markDown.css'\n\nclass MarkDown extends Component{\n    constructor(props){\n        super(props);\n        this.state=({code:false})\n        this.text2MD=this.text2MD.bind(this);\n        this.changeView=this.changeView.bind(this);\n    }\n    componentWillMount(){\n        this.converter=new Showdown.Converter({emoji: true});\n    }\n    changeView(){\n        this.setState({code:!this.state.code})\n    }\n    text2MD(){\n        return {__html:this.converter.makeHtml(this.props.text)}\n      }\n   render(){\n    return(\n        <div className=\"markdownContainer\">\n            <div className=\"markdownOptionsContainer\">\n                <div>PREVIEW</div>\n                <div className=\"markdownToggle\"\n                onClick={this.changeView}\n                >&lt; / &gt;</div>\n            </div>\n            {this.state.code\n            ?<div className=\"markdownOutput\">\n                {this.converter.makeHtml(this.props.text)}\n            </div>\n            :<div className=\"markdownOutput\"\n            dangerouslySetInnerHTML={this.text2MD()}/>}           \n        </div>\n    )\n   }\n}\n\nexport default MarkDown","import React,{Component} from 'react';\n\nimport './App.css';\nimport Header from './components/Header/header';\nimport Details from './components/Details/details';\nimport TextArea from './components/TextArea/textArea';\nimport MarkDown from './components/MarkDown/markDown';\n\nconst themeDay = {\n  '--detailsBar-color': 'white',\n  '--markDown-bg-color':'white',\n  '--markDown-font-color':'black',\n  '--details-bg-color':'white',\n  '--details-font-color':'black',\n  '--border-opacity':'#e8e8e8'\n};\nconst themeNight = {\n  '--detailsBar-color': 'white',\n  '--markDown-bg-color':'#1f2430',\n  '--markDown-font-color':'#cbccc6',\n  '--details-bg-color':'#373d49',\n  '--details-font-color':'white',\n  '--border-opacity':'#e8e8e881'\n};\n\nconst starterTemplate=\"GitHub Flavored Markdown\\n========================\\nEverything from markdown plus GFM features:smile:\"\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state=({text:starterTemplate,fileName:\"Untitled Doc\",darkMode:'false'})\n    this.onTextChange=this.onTextChange.bind(this);\n    this.text2MD=this.text2MD.bind(this);\n  }\n  componentDidMount(){\n    this.updateCSSVariables(!this.state.darkMode?themeNight:themeDay)\n  }\n  componentWillUpdate(nextProps,nextState){\n    if(nextState.darkMode!==this.state.darkMode){\n      this.updateCSSVariables(nextState.darkMode?themeDay:themeNight)\n    }\n  }\n  onTextChange(el){\n    this.setState({text:el.target.value})\n  }\n  text2MD(){\n    return {__html:this.converter.makeHtml(this.state.text)}\n  }\n  updateCSSVariables(el) {   \n    for (const [key, value] of Object.entries(el)) {\n      document.documentElement.style.setProperty(key, value);\n    }\n  }\n  render(){\n    return (\n      <div className=\"appContainer\">\n        <Header \n        text={this.state.text}\n        fileName={this.state.fileName}\n        toggleTheme={()=>{this.setState({darkMode:!this.state.darkMode})}}\n        />\n        <Details \n          wordCount={this.state.text!==\"\"?(this.state.text.split(' ').length):0} \n          characterCount={this.state.text.length}\n          fileName={this.state.fileName}\n          setFileName={(el)=>{this.setState({fileName:el})}}\n        />\n        <div className=\"appSubContainer\">\n          <TextArea \n            text={this.state.text}\n            setText={(el)=>{this.setState({text:el})}}\n            darkMode={this.state.darkMode}/>\n          <MarkDown\n            text={this.state.text}\n           />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}